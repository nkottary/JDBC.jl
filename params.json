{"name":"JDBC.jl","tagline":"Julia interface to Java database drivers","body":"# JDBC - Julia interface to Java JDBC database drivers\r\n\r\n[![Build Status](https://travis-ci.org/JuliaDB/JDBC.jl.svg?branch=master)](https://travis-ci.org/JuliaDB/JDBC.jl)  [![Build status](https://ci.appveyor.com/api/projects/status/3m0pq27s24mkaduq?svg=true)](https://ci.appveyor.com/project/aviks/jdbc-jl)  [![JDBC](http://pkg.julialang.org/badges/JDBC_0.3.svg)](http://pkg.julialang.org/?pkg=JDBC)  [![JDBC](http://pkg.julialang.org/badges/JDBC_0.4.svg)](http://pkg.julialang.org/?pkg=JDBC)  [![JDBC](http://pkg.julialang.org/badges/JDBC_0.5.svg)](http://pkg.julialang.org/?pkg=JDBC)\r\n\r\n\r\nThis package enables the use of Java JDBC drivers to access databases from within Julia. It uses the [JavaCall.jl](https://github.com/aviks/JavaCall.jl) package to call into Java in order to use the JDBC drivers. \r\n\r\nThe API provided by this package is very similar to the native JDBC API, with the necessary changes to move from \r\nan object oriented syntax to a Julia's more *functional* syntax. So while a Java method is transformed to a Julia function\r\nwith the same name, the reciever in Java (the object before the dot) becomes the first argument to the Julia function. For\r\nexample, `statement.executeQuery(sql_string)` in Java becomes, in Julia: `executeQuery(statement, sql_string)`. \r\nTherefore, some familiarity with JDBC is useful for working with this package. \r\n\r\nIn JDBC, accessing the data frome a SQL call is done by iterating over a `ResultSet` instance. In Julia therefore, the `ResultSet` is a regular Julia iterator, and can be iterated in the usual fashion. \r\n\r\nThere is however, an optional `readtable` method that is defined when `DataFrames` is loaded. This converts a JDBC resultset into a Julia DataFrame. \r\n\r\n\r\n\r\n\r\n###Initialisation\r\n\r\nTo start it up, add the database driver jar file to the classpath, and then initialise the JVM. \r\n\r\n```julia\r\nusing JDBC\r\nJavaCall.addClassPath(\"/home/me/derby/derby.jar\")\r\nJDBC.init() # or JavaCall.init()\r\n ```\r\n###Basic Usage\r\n\r\nAs described above, using this package is very similar to using a JDBC driver in Java. Write the Julia code in a way that is very similar to how corresponding Java code would look. \r\n\r\n```julia\r\nconn = DriverManager.getConnection(\"jdbc:derby:test/juliatest\")\r\nstmt = createStatement(conn)\r\nrs = executeQuery(stmt, \"select * from firsttable\")\r\n for r in rs\r\n      println(getInt(r, 1),  getString(r,\"NAME\"))\r\n end\r\n```\r\n\r\nTo get each row as a julia tuple, iterate over the result set using `JDBCRowIterator`.  Values in the tuple will be of Nullable type if they are declared to be nullable in the database.\r\n\r\n```julia\r\nfor r in JDBCRowIterator(rs)\r\n    println(r)\r\nend\r\n```\r\n\r\nThe following accessor functions are defined. Each of these functions take two arguments:  the `Resultset`, and either a field index or a field name. The result of these accessor functions is always a pure Julia object. All conversions from Java types are done before they are returned from these functions. \r\n```julia\r\ngetInt\r\ngetFloat\r\ngetString \r\ngetShort \r\ngetByte \r\ngetTime \r\ngetTimeStamp \r\ngetDate\r\ngetBoolean\r\ngetNString\r\ngetURL\r\n```\r\n###Updates\r\n\r\nWhile inserts and updates can be done via a fully specified SQL string using the `Statement` instance above, it is much safer to do so via a `PreparedStatement`. A `PreparedStatement` has setter functions defined for different types, corresponding to the getter functions shown above. \r\n\r\n```\r\nppstmt = prepareStatement(conn, \"insert into firsttable values (?, ?)\")\r\nsetInt(ppstmt, 1,10)\r\nsetString(ppstmt, 2,\"TEN\")\r\nexecuteUpdate(ppstmt)\r\n```\r\n\r\nSimilary, a `CallableStatement` can be used to run stored procedures. A `CallableStatement` can have both input and output parameters, and thus has both getter and setter functions defined. \r\n```julia\r\ncstmt = JDBC.prepareCall(conn, \"CALL SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY(?, ?)\")\r\nsetString(cstmt, 1, \"derby.locks.deadlockTimeout\")\r\nsetString(cstmt, 2, \"10\")\r\nexecute(cstmt)\r\n```\r\n\r\nNote that as per the JDBC API there are two kinds of execute methods defined on a `Statement` : `executeQuery` returns a ResultSet (usually from a `select`), and `executeUpdate` returns an Integer which denotes the number of rows effected by a query (usually an `update` or `insert` or a DDL). For `PreparedStatements` and `CallableStatements`, an additional function `execute` is defined which returns a boolean which specifies whether a ResultSet has been returned from the query. \r\n\r\nAlso note that for a `Statement`, the query itself is specified in the corresponding `execute..` call, while for a `PreparedStatement` and a `CallableStatement`, the query itself is specified while creating them. \r\n\r\nThe connections and the statements should be closed via their `close(...)` functions. `commit(connection)`, `rollaback(connection)` and `setAutoCommit(true|false)` do the obvious things. \r\n\r\n###Metadata\r\n\r\nPass the `JResultSet` object from `executeQuery` to `getTableMetaData` to get an array of `(column_name, column_type)` tuples.\r\n\r\n```julia\r\nconn = DriverManager.getConnection(\"jdbc:derby:test/juliatest\")\r\nstmt = createStatement(conn)\r\nrs = executeQuery(stmt, \"select * from firsttable\")\r\nmetadata = getTableMetaData(rs)\r\n```\r\n\r\n###Caveats\r\n * BLOB's are not yet supported. \r\n * While a large part of the JDBC API has been wrapped, not everything is. Please file an issue if you find anything missing that you need. However, it is very easy to call the Java method directly using `JavaCall`. Please look at the `JDBC.jl` source for inspiration if you need to do that. \r\n * Both Julia `DateTime` and Java `java.sql.Date` do not store any timezone information within them. I believe we are doing the right thing here, and everything should be consistent. However timezone is easy to get wrong, so please double check if your application depends on accurate times. \r\n * There are many many different JDBC drivers in Java. This package needs testing with a wide variety of those. \r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}